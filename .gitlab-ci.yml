services:
  - docker:dind


stages:
  - build
  - test
  - package
  - deploy

# Build the wheel distribution package and upload it to the GitLab PyPi repository.
# Save the wheel package as an artifact to be used in later stage.
pypackage_build_and_upload:
  image: python:latest
  stage: build
  script:
    - pip install build twine
    - python3 -m build 
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi ./dist/*
  artifacts:
    paths:
      - ./dist/*.whl


# Run the tests using Docker Compose.
# Uses the exit code of the integration_tests service container to determine success.
tests:
  image: docker:latest
  stage: test
  script:
    - docker compose -f compose-test-runner.yaml -p ci up --exit-code-from integration_tests --build 


# Build the Docker image and push it to the GitLab Container Registry.
# The image is tagged with the project name and the version number.
# Example: registry.gitlab.com/username/project-name:1.0.0
package:
  image: docker:latest
  stage: package
  script:
    # Get the app version from the VERSION.txt file.
    - APP_VERSION="$(cat VERSION.txt)"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$APP_VERSION .
    - docker push     $CI_REGISTRY_IMAGE:$APP_VERSION