networks:
    web_to_db:

# One or more services can be defined under the top-level key: services.
services:
    # The name postgres is the name of the database service.
    # This arbitrary name becomes the hostname of the container.
    postgres:
        # The image to use to create the container.
        image: postgres:15-alpine
        # The command is passed as arguments to the ENTRYPOINT script. 
        command: "-c shared_buffers=256MB -c max_connections=200"
        # Instructs compose to restart the container if it shuts 
        # down unless the container is intentionally stopped.
        restart: unless-stopped
        healthcheck:
            test: pg_isready -U "${VAR_DATABASE_USER}" -d "${VAR_DATABASE_NAME}" -h postgres
            interval: 3s
            retries: 5
        # The networks attached to the container.
        networks:
            - web_to_db
        # Environment variables used to configure the database. 
        environment:
            - POSTGRES_USER=${VAR_DATABASE_USER}
            - POSTGRES_PASSWORD=${VAR_DATABASE_PASS}
            - POSTGRES_DB=${VAR_DATABASE_NAME}


    integration_tests:
        build:
            # The context points to the location of the Dockerfile.
            # The Dockerfile at the root of the project is used as a test environment.
            context: ./
        networks:
            - web_to_db
        environment:
            - DATABASE_HOST=postgres
            - DATABASE_USER=${VAR_DATABASE_USER}
            - DATABASE_PASS=${VAR_DATABASE_PASS}
            - DATABASE_NAME=${VAR_DATABASE_NAME}
        # The command python3 -m webapp.app builds the database schema and initializes the database.
        # The command python3 -m unittest -v webapp.tests runs the web integration tests.
        command: sh -c "python3 -m webapp.app && python3 -m unittest -v webapp.tests"
        depends_on: 
            postgres:
                condition: service_healthy
